NAME
       grep, egrep, fgrep, rgrep - print lines that match patterns

SYNOPSIS
       grep [OPTION...] PATTERNS [FILE...]
       grep [OPTION...] -e PATTERNS ... [FILE...]
       grep [OPTION...] -f PATTERN_FILE ... [FILE...]

DESCRIPTION
       grep  searches  for  PATTERNS in each FILE.  PATTERNS is one or more patterns separated by newline characters, and grep prints each line that matches a pattern.
       Typically PATTERNS should be quoted when grep is used in a shell command.

       A FILE of “-” stands for standard input.  If no FILE is given, recursive searches examine the working directory, and nonrecursive searches read standard input.

       Debian also includes the variant programs egrep, fgrep and rgrep.  These programs are the same as grep -E, grep -F, and grep -r, respectively.   These  variants
       are  deprecated upstream, but Debian provides for backward compatibility. For portability reasons, it is recommended to avoid the variant programs, and use grep
       with the related option instead.

OPTIONS
   Generic Program Information
       --help Output a usage message and exit.

       -V, --version
              Output the version number of grep and exit.

   Pattern Syntax
 -E, --extended-regexp
              Interpret PATTERNS as extended regular expressions (EREs, see below).

       -F, --fixed-strings
              Interpret PATTERNS as fixed strings, not regular expressions.

       -G, --basic-regexp
              Interpret PATTERNS as basic regular expressions (BREs, see below).  This is the default.

       -P, --perl-regexp
              Interpret PATTERNS as Perl-compatible regular expressions (PCREs).  This option is experimental when combined with the -z (--null-data) option, and  grep
              -P may warn of unimplemented features.

   Matching Control
       -e PATTERNS, --regexp=PATTERNS
              Use  PATTERNS  as  the  patterns.  If this option is used multiple times or is combined with the -f (--file) option, search for all patterns given.  This
              option can be used to protect a pattern beginning with “-”.

       -f FILE, --file=FILE
              Obtain patterns from FILE, one per line.  If this option is used multiple times or is combined with the -e (--regexp) option,  search  for  all  patterns
              given.  The empty file contains zero patterns, and therefore matches nothing.  If FILE is - , read patterns from standard input.

       -i, --ignore-case
              Ignore case distinctions in patterns and input data, so that characters that differ only in case match each other.

       --no-ignore-case
              Do  not  ignore  case distinctions in patterns and input data.  This is the default.  This option is useful for passing to shell scripts that already use
 -i, to cancel its effects because the two options override each other.

       -v, --invert-match
              Invert the sense of matching, to select non-matching lines.

       -w, --word-regexp
              Select only those lines containing matches that form whole words.  The test is that the matching substring must either be at the beginning of  the  line,
              or  preceded  by  a non-word constituent character.  Similarly, it must be either at the end of the line or followed by a non-word constituent character.
              Word-constituent characters are letters, digits, and the underscore.  This option has no effect if -x is also specified.

       -x, --line-regexp
              Select only those matches that exactly match the whole line.  For a regular expression  pattern,  this  is  like  parenthesizing  the  pattern  and  then
              surrounding it with ^ and $.

   General Output Control
       -c, --count
              Suppress  normal output; instead print a count of matching lines for each input file.  With the -v, --invert-match option (see above), count non-matching
              lines.

       --color[=WHEN], --colour[=WHEN]
              Surround the matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets, and separators (for fields and groups of
              context lines) with escape sequences to display them in color on the terminal.  The colors are defined by the environment variable GREP_COLORS.  WHEN  is
              never, always, or auto.

       -L, --files-without-match
              Suppress normal output; instead print the name of each input file from which no output would normally have been printed.
 -l, --files-with-matches
              Suppress  normal  output;  instead  print the name of each input file from which output would normally have been printed.  Scanning each input file stops
              upon first match.

       -m NUM, --max-count=NUM
              Stop reading a file after NUM matching lines.  If NUM is zero, grep stops right away without reading input.  A NUM of -1 is treated as infinity and  grep
              does  not  stop;  this  is  the  default.   If  the input is standard input from a regular file, and NUM matching lines are output, grep ensures that the
              standard input is positioned to just after the last matching line before exiting, regardless of the presence of trailing context lines.  This  enables  a
              calling  process  to resume a search.  When grep stops after NUM matching lines, it outputs any trailing context lines.  When the -c or --count option is
              also used, grep does not output a count greater than NUM.  When the -v or --invert-match option is also  used,  grep  stops  after  outputting  NUM  non-
              matching lines.

       -o, --only-matching
              Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.

       -q, --quiet, --silent
              Quiet;  do  not write anything to standard output.  Exit immediately with zero status if any match is found, even if an error was detected.  Also see the
              -s or --no-messages option.

       -s, --no-messages
              Suppress error messages about nonexistent or unreadable files.

   Output Line Prefix Control
       -b, --byte-offset
              Print the 0-based byte offset within the input file before each line of output.  If -o (--only-matching) is specified, print the offset of  the  matching
              part itself.

